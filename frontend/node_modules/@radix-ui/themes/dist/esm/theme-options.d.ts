import { radixGrayScales } from './helpers/radix-colors';
import type { GetPropDefTypes } from './helpers';
declare const themePropDefs: {
    hasBackground: {
        type: "boolean";
        default: true;
    };
    appearance: {
        type: "enum";
        values: readonly ["inherit", "light", "dark"];
        default: "inherit";
    };
    accentColor: {
        type: "enum";
        values: readonly ["tomato", "red", "ruby", "crimson", "pink", "plum", "purple", "violet", "iris", "indigo", "blue", "cyan", "teal", "jade", "green", "grass", "brown", "orange", "sky", "mint", "lime", "yellow", "amber", "gold", "bronze", "gray"];
        default: "indigo";
    };
    grayColor: {
        type: "enum";
        values: readonly ["gray", "mauve", "slate", "sage", "olive", "sand", "auto"];
        default: "auto";
    };
    panelBackground: {
        type: "enum";
        values: readonly ["solid", "translucent"];
        default: "translucent";
    };
    radius: {
        type: "enum";
        values: readonly ["none", "small", "medium", "large", "full"];
        default: "medium";
    };
    scaling: {
        type: "enum";
        values: readonly ["90%", "95%", "100%", "105%", "110%"];
        default: "100%";
    };
};
type ThemeProps = GetPropDefTypes<typeof themePropDefs>;
type ThemeAppearance = NonNullable<ThemeProps['appearance']>;
type ThemeAccentColor = NonNullable<ThemeProps['accentColor']>;
type ThemeGrayColor = NonNullable<ThemeProps['grayColor']>;
type ThemePanelBackground = NonNullable<ThemeProps['panelBackground']>;
type ThemeRadius = NonNullable<ThemeProps['radius']>;
type ThemeScaling = NonNullable<ThemeProps['scaling']>;
type ThemeOptions = {
    appearance: ThemeAppearance;
    accentColor: ThemeAccentColor;
    grayColor: ThemeGrayColor;
    panelBackground: ThemePanelBackground;
    radius: ThemeRadius;
    scaling: ThemeScaling;
};
declare const themeAccentColorsGrouped: {
    label: string;
    values: ThemeAccentColor[];
}[];
declare const themeAccentColorsOrdered: ThemeAccentColor[];
declare const themeGrayColorsGrouped: {
    label: string;
    values: ThemeGrayColor[];
}[];
declare function getMatchingGrayColor(accentColor: ThemeAccentColor): (typeof radixGrayScales)[number];
export { themePropDefs, getMatchingGrayColor, themeAccentColorsGrouped, themeAccentColorsOrdered, themeGrayColorsGrouped, };
export type { ThemeOptions };
