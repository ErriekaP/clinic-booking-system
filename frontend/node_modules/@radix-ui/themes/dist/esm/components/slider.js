'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as SliderPrimitive from '@radix-ui/react-slider';
import { sliderPropDefs } from './slider.props';
import { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';
const Slider = React.forwardRef((props, forwardedRef) => {
    var _a, _b;
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { className, size = sliderPropDefs.size.default, variant = sliderPropDefs.variant.default, color = sliderPropDefs.color.default, highContrast = sliderPropDefs.highContrast.default, radius = sliderPropDefs.radius.default, tabIndex, ...sliderProps } = marginRest;
    return (React.createElement(SliderPrimitive.Root, { "data-accent-color": color, "data-radius": radius, ref: forwardedRef, ...sliderProps, className: classNames('rt-SliderRoot', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }, withMarginProps(marginProps)) },
        React.createElement(SliderPrimitive.Track, { className: "rt-SliderTrack" },
            React.createElement(SliderPrimitive.Range, { className: classNames('rt-SliderRange', { 'rt-high-contrast': highContrast }), "data-inverted": sliderProps.inverted ? '' : undefined })),
        ((_b = (_a = sliderProps.value) !== null && _a !== void 0 ? _a : sliderProps.defaultValue) !== null && _b !== void 0 ? _b : []).map((value, index) => (React.createElement(SliderPrimitive.Thumb, { key: index, className: "rt-SliderThumb", ...(tabIndex !== undefined ? { tabIndex } : undefined) })))));
});
Slider.displayName = 'Slider';
export { Slider };
//# sourceMappingURL=slider.js.map