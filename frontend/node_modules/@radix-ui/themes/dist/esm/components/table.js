import * as React from 'react';
import classNames from 'classnames';
import { tableRootPropDefs, tableRowPropDefs, tableCellPropDefs } from './table.props';
import { extractMarginProps, withMarginProps, extractPaddingProps, withPaddingProps, withBreakpoints, } from '../helpers';
import { ScrollArea } from './scroll-area';
const TableRoot = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { className, children, size = tableRootPropDefs.size.default, variant = tableRootPropDefs.variant.default, ...rootProps } = marginRest;
    return (React.createElement("div", { ref: forwardedRef, className: classNames('rt-TableRoot', className, `rt-variant-${variant}`, withBreakpoints(size, 'rt-r-size'), withMarginProps(marginProps)), ...rootProps },
        React.createElement(ScrollArea, null,
            React.createElement("table", { className: "rt-TableRootTable" }, children))));
});
TableRoot.displayName = 'Table';
const TableHeader = React.forwardRef((props, forwardedRef) => (React.createElement("thead", { ...props, ref: forwardedRef, className: classNames('rt-TableHeader', props.className) })));
TableHeader.displayName = 'TableHeader';
const TableBody = React.forwardRef((props, forwardedRef) => (React.createElement("tbody", { ...props, ref: forwardedRef, className: classNames('rt-TableBody', props.className) })));
TableBody.displayName = 'TableBody';
const TableRow = React.forwardRef((props, forwardedRef) => {
    const { className, align = tableRowPropDefs.align.default, ...rowProps } = props;
    return (React.createElement("tr", { ...rowProps, ref: forwardedRef, className: classNames('rt-TableRow', className, withBreakpoints(align, 'rt-r-va', {
            baseline: 'baseline',
            start: 'top',
            center: 'middle',
            end: 'bottom',
        })) }));
});
TableRow.displayName = 'TableRow';
const TableCellImpl = React.forwardRef((props, forwardedRef) => {
    const { rest: paddingRest, ...paddingProps } = extractPaddingProps(props);
    const { tag: Tag = 'td', className, style, justify = tableCellPropDefs.justify.default, width = tableCellPropDefs.width.default, ...cellProps } = paddingRest;
    return (React.createElement(Tag, { ...cellProps, ref: forwardedRef, className: classNames('rt-TableCell', className, withPaddingProps(paddingProps), withBreakpoints(justify, 'rt-r-ta', { start: 'left', center: 'center', end: 'right' })), style: { width, ...style } }));
});
TableCellImpl.displayName = 'TableCellImpl';
const TableCell = React.forwardRef((props, forwardedRef) => (React.createElement(TableCellImpl, { ...props, tag: "td", ref: forwardedRef })));
TableCell.displayName = 'TableCell';
const TableColumnHeaderCell = React.forwardRef((props, forwardedRef) => (React.createElement(TableCellImpl, { scope: "col", ...props, tag: "th", ref: forwardedRef, className: classNames('rt-TableColumnHeaderCell', props.className) })));
TableColumnHeaderCell.displayName = 'TableColumnHeaderCell';
const TableRowHeaderCell = React.forwardRef((props, forwardedRef) => (React.createElement(TableCellImpl, { scope: "row", ...props, tag: "th", ref: forwardedRef, className: classNames('rt-TableRowHeaderCell', props.className) })));
TableRowHeaderCell.displayName = 'TableRowHeaderCell';
const Table = Object.assign({}, {
    Root: TableRoot,
    Header: TableHeader,
    Body: TableBody,
    Row: TableRow,
    Cell: TableCell,
    ColumnHeaderCell: TableColumnHeaderCell,
    RowHeaderCell: TableRowHeaderCell,
});
export { Table, TableRoot, TableHeader, TableBody, TableRow, TableCell, TableColumnHeaderCell, TableRowHeaderCell, };
//# sourceMappingURL=table.js.map