'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as SelectPrimitive from '@radix-ui/react-select';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';
import { selectRootPropDefs, selectTriggerPropDefs, selectContentPropDefs } from './select.props';
import { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';
import { Theme, useThemeContext } from '../theme';
import { ThickCheckIcon, ChevronDownIcon } from '../icons';
const SelectContext = React.createContext({});
const SelectRoot = (props) => {
    const { children, size = selectRootPropDefs.size.default, ...rootProps } = props;
    return (React.createElement(SelectPrimitive.Root, { ...rootProps },
        React.createElement(SelectContext.Provider, { value: React.useMemo(() => ({ size }), [size]) }, children)));
};
SelectRoot.displayName = 'SelectRoot';
const SelectTrigger = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { className, variant = selectTriggerPropDefs.variant.default, color = selectTriggerPropDefs.color.default, radius = selectTriggerPropDefs.radius.default, placeholder, ...triggerProps } = marginRest;
    const { size } = React.useContext(SelectContext);
    return (React.createElement(SelectPrimitive.Trigger, { asChild: true },
        React.createElement("button", { "data-accent-color": color, "data-radius": radius, ...triggerProps, ref: forwardedRef, className: classNames('rt-reset', 'rt-SelectTrigger', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, withMarginProps(marginProps)) },
            React.createElement("span", { className: "rt-SelectTriggerInner" },
                React.createElement(SelectPrimitive.Value, { placeholder: placeholder })),
            React.createElement(SelectPrimitive.Icon, { asChild: true },
                React.createElement(ChevronDownIcon, { className: "rt-SelectIcon" })))));
});
SelectTrigger.displayName = 'SelectTrigger';
const SelectContent = React.forwardRef((props, forwardedRef) => {
    const { className, children, variant = selectContentPropDefs.variant.default, highContrast = selectContentPropDefs.highContrast.default, color = selectContentPropDefs.color.default, container, ...contentProps } = props;
    const { size } = React.useContext(SelectContext);
    const themeContext = useThemeContext();
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(SelectPrimitive.Portal, { container: container },
        React.createElement(Theme, { asChild: true },
            React.createElement(SelectPrimitive.Content, { "data-accent-color": resolvedColor, sideOffset: 4, ...contentProps, ref: forwardedRef, className: classNames({ 'rt-PopperContent': contentProps.position === 'popper' }, 'rt-SelectContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(ScrollAreaPrimitive.Root, { type: "auto", className: "rt-ScrollAreaRoot" },
                    React.createElement(SelectPrimitive.Viewport, { asChild: true, className: "rt-SelectViewport" },
                        React.createElement(ScrollAreaPrimitive.Viewport, { className: "rt-ScrollAreaViewport", style: { overflowY: undefined } }, children)),
                    React.createElement(ScrollAreaPrimitive.Scrollbar, { className: "rt-ScrollAreaScrollbar rt-r-size-1", orientation: "vertical" },
                        React.createElement(ScrollAreaPrimitive.Thumb, { className: "rt-ScrollAreaThumb" })))))));
});
SelectContent.displayName = 'SelectContent';
const SelectItem = React.forwardRef((props, forwardedRef) => {
    const { className, children, ...itemProps } = props;
    return (React.createElement(SelectPrimitive.Item, { ...itemProps, ref: forwardedRef, className: classNames('rt-SelectItem', className) },
        React.createElement(SelectPrimitive.ItemIndicator, { className: "rt-SelectItemIndicator" },
            React.createElement(ThickCheckIcon, { className: "rt-SelectItemIndicatorIcon" })),
        React.createElement(SelectPrimitive.ItemText, null, children)));
});
SelectItem.displayName = 'SelectItem';
const SelectGroup = React.forwardRef((props, forwardedRef) => (React.createElement(SelectPrimitive.Group, { ...props, ref: forwardedRef, className: classNames('rt-SelectGroup', props.className) })));
SelectGroup.displayName = 'SelectGroup';
const SelectLabel = React.forwardRef((props, forwardedRef) => (React.createElement(SelectPrimitive.Label, { ...props, ref: forwardedRef, className: classNames('rt-SelectLabel', props.className) })));
SelectLabel.displayName = 'SelectLabel';
const SelectSeparator = React.forwardRef((props, forwardedRef) => (React.createElement(SelectPrimitive.Separator, { ...props, ref: forwardedRef, className: classNames('rt-SelectSeparator', props.className) })));
SelectSeparator.displayName = 'SelectSeparator';
const Select = Object.assign({}, {
    Root: SelectRoot,
    Trigger: SelectTrigger,
    Content: SelectContent,
    Item: SelectItem,
    Group: SelectGroup,
    Label: SelectLabel,
    Separator: SelectSeparator,
});
export { Select, SelectRoot, SelectTrigger, SelectContent, SelectItem, SelectGroup, SelectLabel, SelectSeparator, };
//# sourceMappingURL=select.js.map