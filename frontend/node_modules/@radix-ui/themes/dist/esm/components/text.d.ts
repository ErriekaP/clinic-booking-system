import * as React from 'react';
import { textPropDefs } from './text.props';
import type { PropsWithoutRefOrColor, MarginProps, GetPropDefTypes, NiceIntersection } from '../helpers';
type TextOwnProps = GetPropDefTypes<typeof textPropDefs>;
type CommonTextProps = NiceIntersection<MarginProps, TextOwnProps>;
type TextAsChildProps = {
    asChild?: boolean;
    as?: never;
} & PropsWithoutRefOrColor<'span'>;
type TextSpanProps = {
    as?: 'span';
    asChild?: never;
} & PropsWithoutRefOrColor<'span'>;
type TextDivProps = {
    as: 'div';
    asChild?: never;
} & PropsWithoutRefOrColor<'div'>;
type TextLabelProps = {
    as: 'label';
    asChild?: never;
} & PropsWithoutRefOrColor<'label'>;
type TextPProps = {
    as: 'p';
    asChild?: never;
} & PropsWithoutRefOrColor<'p'>;
type TextProps = CommonTextProps & (TextAsChildProps | TextSpanProps | TextDivProps | TextLabelProps | TextPProps);
declare const Text: React.ForwardRefExoticComponent<(Omit<CommonTextProps & {
    asChild?: boolean | undefined;
    as?: undefined;
} & PropsWithoutRefOrColor<"span">, "ref"> | Omit<CommonTextProps & {
    as?: "span" | undefined;
    asChild?: undefined;
} & PropsWithoutRefOrColor<"span">, "ref"> | Omit<CommonTextProps & {
    as: 'div';
    asChild?: undefined;
} & PropsWithoutRefOrColor<"div">, "ref"> | Omit<CommonTextProps & {
    as: 'label';
    asChild?: undefined;
} & PropsWithoutRefOrColor<"label">, "ref"> | Omit<CommonTextProps & {
    as: 'p';
    asChild?: undefined;
} & PropsWithoutRefOrColor<"p">, "ref">) & React.RefAttributes<HTMLSpanElement>>;
export { Text };
export type { TextProps };
