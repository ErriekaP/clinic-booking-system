'use client';
import * as React from 'react';
import classNames from 'classnames';
import { composeEventHandlers } from '@radix-ui/primitive';
import { textFieldPropDefs, textFieldSlotPropDefs } from './text-field.props';
import { extractMarginProps, withMarginProps, extractPaddingProps, withPaddingProps, withBreakpoints, } from '../helpers';
const TextFieldContext = React.createContext(undefined);
const TextFieldRoot = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { children, className, size = textFieldPropDefs.size.default, variant = textFieldPropDefs.variant.default, color = textFieldPropDefs.color.default, radius = textFieldPropDefs.radius.default, ...rootProps } = marginRest;
    return (React.createElement("div", { "data-radius": radius, ...rootProps, ref: forwardedRef, className: classNames('rt-TextFieldRoot', className, withMarginProps(marginProps)), onPointerDown: composeEventHandlers(rootProps.onPointerDown, (event) => {
            const target = event.target;
            if (target.closest('input, button, a'))
                return;
            const input = event.currentTarget.querySelector('.rt-TextFieldInput');
            if (!input)
                return;
            const position = input.compareDocumentPosition(target);
            const targetIsBeforeInput = (position & Node.DOCUMENT_POSITION_PRECEDING) !== 0;
            const cursorPosition = targetIsBeforeInput ? 0 : input.value.length;
            requestAnimationFrame(() => {
                input.setSelectionRange(cursorPosition, cursorPosition);
                input.focus();
            });
        }) },
        React.createElement(TextFieldContext.Provider, { value: { size, variant, color, radius } }, children)));
});
TextFieldRoot.displayName = 'TextFieldRoot';
const TextFieldSlot = React.forwardRef((props, forwardedRef) => {
    const { rest: paddingRest, ...paddingProps } = extractPaddingProps(props);
    const { className, color = textFieldSlotPropDefs.color.default, gap = textFieldSlotPropDefs.gap.default, ...slotProps } = paddingRest;
    const context = React.useContext(TextFieldContext);
    return (React.createElement("div", { "data-accent-color": color, ...slotProps, ref: forwardedRef, className: classNames('rt-TextFieldSlot', className, withBreakpoints(context === null || context === void 0 ? void 0 : context.size, 'rt-r-size'), withBreakpoints(gap, 'rt-r-gap'), withPaddingProps(paddingProps)) }));
});
TextFieldSlot.displayName = 'TextFieldSlot';
const TextFieldInput = React.forwardRef((props, forwardedRef) => {
    var _a, _b, _c, _d;
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const context = React.useContext(TextFieldContext);
    const hasRoot = context !== undefined;
    const { className, size = (_a = context === null || context === void 0 ? void 0 : context.size) !== null && _a !== void 0 ? _a : textFieldPropDefs.size.default, variant = (_b = context === null || context === void 0 ? void 0 : context.variant) !== null && _b !== void 0 ? _b : textFieldPropDefs.variant.default, color = (_c = context === null || context === void 0 ? void 0 : context.color) !== null && _c !== void 0 ? _c : textFieldPropDefs.color.default, radius = (_d = context === null || context === void 0 ? void 0 : context.radius) !== null && _d !== void 0 ? _d : textFieldPropDefs.radius.default, ...inputProps } = marginRest;
    const input = (React.createElement(React.Fragment, null,
        React.createElement("input", { "data-accent-color": color, spellCheck: "false", ...inputProps, ref: forwardedRef, className: classNames('rt-TextFieldInput', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`) }),
        React.createElement("div", { "data-accent-color": color, "data-radius": (context === null || context === void 0 ? void 0 : context.radius) ? undefined : radius, className: "rt-TextFieldChrome" })));
    return hasRoot ? (input) : (React.createElement(TextFieldRoot, { ...marginProps, size: size, variant: variant, color: color, radius: radius }, input));
});
TextFieldInput.displayName = 'TextFieldInput';
const TextField = Object.assign({}, {
    Root: TextFieldRoot,
    Slot: TextFieldSlot,
    Input: TextFieldInput,
});
export { TextField, TextFieldRoot, TextFieldSlot, TextFieldInput };
//# sourceMappingURL=text-field.js.map