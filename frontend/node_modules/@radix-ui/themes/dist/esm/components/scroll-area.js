'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';
import { scrollAreaPropDefs } from './scroll-area.props';
import { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';
const ScrollArea = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { className, style, type, scrollHideDelay = type !== 'scroll' ? 0 : undefined, dir, size = scrollAreaPropDefs.size.default, radius = scrollAreaPropDefs.radius.default, scrollbars = scrollAreaPropDefs.scrollbars.default, ...viewportProps } = marginRest;
    return (React.createElement(ScrollAreaPrimitive.Root, { type: type, scrollHideDelay: scrollHideDelay, className: classNames('rt-ScrollAreaRoot', className, withMarginProps(marginProps)), style: style },
        React.createElement(ScrollAreaPrimitive.Viewport, { ...viewportProps, ref: forwardedRef, className: "rt-ScrollAreaViewport" }),
        React.createElement("div", { className: "rt-ScrollAreaViewportFocusRing" }),
        scrollbars !== 'vertical' ? (React.createElement(ScrollAreaPrimitive.Scrollbar, { "data-radius": radius, orientation: "horizontal", className: classNames('rt-ScrollAreaScrollbar', withBreakpoints(size, 'rt-r-size')) },
            React.createElement(ScrollAreaPrimitive.Thumb, { className: "rt-ScrollAreaThumb" }))) : null,
        scrollbars !== 'horizontal' ? (React.createElement(ScrollAreaPrimitive.Scrollbar, { "data-radius": radius, orientation: "vertical", className: classNames('rt-ScrollAreaScrollbar', withBreakpoints(size, 'rt-r-size')) },
            React.createElement(ScrollAreaPrimitive.Thumb, { className: "rt-ScrollAreaThumb" }))) : null,
        scrollbars === 'both' ? (React.createElement(ScrollAreaPrimitive.Corner, { className: "rt-ScrollAreaCorner" })) : null));
});
ScrollArea.displayName = 'ScrollArea';
export { ScrollArea };
//# sourceMappingURL=scroll-area.js.map