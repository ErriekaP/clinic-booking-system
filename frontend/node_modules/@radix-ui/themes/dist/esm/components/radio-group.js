'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { radioGroupPropDefs } from './radio-group.props';
import { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';
const RadioGroupRoot = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { className, size = radioGroupPropDefs.size.default, variant = radioGroupPropDefs.variant.default, color = radioGroupPropDefs.color.default, highContrast = radioGroupPropDefs.highContrast.default, ...rootProps } = marginRest;
    return (React.createElement(RadioGroupPrimitive.Root, { "data-accent-color": color, ...rootProps, ref: forwardedRef, className: classNames('rt-RadioGroupRoot', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }, withMarginProps(marginProps)) }));
});
RadioGroupRoot.displayName = 'RadioGroupRoot';
const RadioGroupItem = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { className, style, ...itemProps } = marginRest;
    return (React.createElement("span", { className: classNames('rt-RadioGroupItem', className, withMarginProps(marginProps)), style: style },
        React.createElement(RadioGroupPrimitive.Item, { ...itemProps, ref: forwardedRef, className: classNames('rt-reset', 'rt-RadioGroupButton') },
            React.createElement(RadioGroupPrimitive.Indicator, { className: "rt-RadioGroupIndicator" }))));
});
RadioGroupItem.displayName = 'RadioGroupItem';
const RadioGroup = Object.assign({}, {
    Root: RadioGroupRoot,
    Item: RadioGroupItem,
});
export { RadioGroup, RadioGroupRoot, RadioGroupItem };
//# sourceMappingURL=radio-group.js.map