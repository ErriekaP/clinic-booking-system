'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as PopoverPrimitive from '@radix-ui/react-popover';
import { popoverContentPropDefs } from './popover.props';
import { withBreakpoints } from '../helpers';
import { Theme } from '../theme';
const PopoverRoot = (props) => (React.createElement(PopoverPrimitive.Root, { ...props }));
PopoverRoot.displayName = 'PopoverRoot';
const PopoverTrigger = React.forwardRef((props, forwardedRef) => React.createElement(PopoverPrimitive.Trigger, { ...props, ref: forwardedRef, asChild: true }));
PopoverTrigger.displayName = 'PopoverTrigger';
const PopoverContent = React.forwardRef((props, forwardedRef) => {
    const { className, forceMount, container, size = popoverContentPropDefs.size.default, ...contentProps } = props;
    return (React.createElement(PopoverPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(PopoverPrimitive.Content, { align: "start", sideOffset: 8, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: classNames('rt-PopperContent', 'rt-PopoverContent', className, withBreakpoints(size, 'rt-r-size')) }))));
});
PopoverContent.displayName = 'PopoverContent';
const PopoverClose = React.forwardRef((props, forwardedRef) => React.createElement(PopoverPrimitive.Close, { ...props, ref: forwardedRef, asChild: true }));
PopoverClose.displayName = 'PopoverClose';
const Popover = Object.assign({}, {
    Root: PopoverRoot,
    Content: PopoverContent,
    Trigger: PopoverTrigger,
    Close: PopoverClose,
});
export { Popover, PopoverRoot, PopoverContent, PopoverTrigger, PopoverClose };
//# sourceMappingURL=popover.js.map