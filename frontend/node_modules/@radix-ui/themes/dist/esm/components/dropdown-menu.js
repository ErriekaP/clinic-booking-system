'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { Slottable } from '@radix-ui/react-slot';
import { ScrollArea } from './scroll-area';
import { dropdownMenuContentPropDefs, dropdownMenuItemPropDefs, } from './dropdown-menu.props';
import { withBreakpoints } from '../helpers';
import { Theme, useThemeContext } from '../theme';
import { ThickCheckIcon, ThickChevronRightIcon } from '../icons';
const DropdownMenuRoot = (props) => (React.createElement(DropdownMenuPrimitive.Root, { ...props }));
DropdownMenuRoot.displayName = 'DropdownMenuRoot';
const DropdownMenuTrigger = React.forwardRef((props, forwardedRef) => React.createElement(DropdownMenuPrimitive.Trigger, { ...props, ref: forwardedRef, asChild: true }));
DropdownMenuTrigger.displayName = 'DropdownMenuTrigger';
const DropdownMenuContentContext = React.createContext({});
const DropdownMenuContent = React.forwardRef((props, forwardedRef) => {
    const themeContext = useThemeContext();
    const { className, children, size = dropdownMenuContentPropDefs.size.default, variant = dropdownMenuContentPropDefs.variant.default, highContrast = dropdownMenuContentPropDefs.highContrast.default, color = dropdownMenuItemPropDefs.color.default, container, forceMount, ...contentProps } = props;
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(DropdownMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(DropdownMenuPrimitive.Content, { "data-accent-color": resolvedColor, align: "start", sideOffset: 4, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: classNames('rt-PopperContent', 'rt-BaseMenuContent', 'rt-DropdownMenuContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(ScrollArea, { type: "auto" },
                    React.createElement("div", { className: classNames('rt-BaseMenuViewport', 'rt-DropdownMenuViewport') },
                        React.createElement(DropdownMenuContentContext.Provider, { value: React.useMemo(() => ({ size, variant, color: resolvedColor, highContrast }), [size, variant, resolvedColor, highContrast]) }, children)))))));
});
DropdownMenuContent.displayName = 'DropdownMenuContent';
const DropdownMenuLabel = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.Label, { ...props, ref: forwardedRef, className: classNames('rt-BaseMenuLabel', 'rt-DropdownMenuLabel', props.className) })));
DropdownMenuLabel.displayName = 'DropdownMenuLabel';
const DropdownMenuItem = React.forwardRef((props, forwardedRef) => {
    const { className, children, color = dropdownMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.Item, { "data-accent-color": color, ...itemProps, ref: forwardedRef, className: classNames('rt-reset', 'rt-BaseMenuItem', 'rt-DropdownMenuItem', className) },
        React.createElement(Slottable, null, children),
        shortcut && React.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, shortcut)));
});
DropdownMenuItem.displayName = 'DropdownMenuItem';
const DropdownMenuGroup = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.Group, { ...props, ref: forwardedRef, className: classNames('rt-BaseMenuGroup', 'rt-DropdownMenuGroup', props.className) })));
DropdownMenuGroup.displayName = 'DropdownMenuGroup';
const DropdownMenuRadioGroup = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.RadioGroup, { ...props, ref: forwardedRef, className: classNames('rt-BaseMenuRadioGroup', 'rt-DropdownMenuRadioGroup', props.className) })));
DropdownMenuRadioGroup.displayName = 'DropdownMenuRadioGroup';
const DropdownMenuRadioItem = React.forwardRef((props, forwardedRef) => {
    const { children, className, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.RadioItem, { ...itemProps, ref: forwardedRef, className: classNames('rt-BaseMenuItem', 'rt-BaseMenuRadioItem', 'rt-DropdownMenuItem', 'rt-DropdownMenuRadioItem', className) },
        React.createElement(Slottable, null, children),
        React.createElement(DropdownMenuPrimitive.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" },
            React.createElement(ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-DropdownMenuItemIndicatorIcon" }))));
});
DropdownMenuRadioItem.displayName = 'DropdownMenuRadioItem';
const DropdownMenuCheckboxItem = React.forwardRef((props, forwardedRef) => {
    const { children, className, shortcut, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.CheckboxItem, { ...itemProps, ref: forwardedRef, className: classNames('rt-BaseMenuItem', 'rt-BaseMenuCheckboxItem', 'rt-DropdownMenuItem', 'rt-DropdownMenuCheckboxItem', className) },
        React.createElement(Slottable, null, children),
        React.createElement(DropdownMenuPrimitive.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" },
            React.createElement(ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })),
        shortcut && React.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, shortcut)));
});
DropdownMenuCheckboxItem.displayName = 'DropdownMenuCheckboxItem';
const DropdownMenuSub = (props) => (React.createElement(DropdownMenuPrimitive.Sub, { ...props }));
DropdownMenuSub.displayName = 'DropdownMenuSub';
const DropdownMenuSubTrigger = React.forwardRef((props, forwardedRef) => {
    const { className, children, ...subTriggerProps } = props;
    return (React.createElement(DropdownMenuPrimitive.SubTrigger, { ...subTriggerProps, ref: forwardedRef, className: classNames('rt-BaseMenuItem', 'rt-BaseMenuSubTrigger', 'rt-DropdownMenuItem', 'rt-DropdownMenuSubTrigger', className) },
        React.createElement(Slottable, null, children),
        React.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" },
            React.createElement(ThickChevronRightIcon, { className: "rt-BaseMenuSubTriggerIcon rt-DropdownMenuSubtriggerIcon" }))));
});
DropdownMenuSubTrigger.displayName = 'DropdownMenuSubTrigger';
const DropdownMenuSubContent = React.forwardRef((props, forwardedRef) => {
    const { className, children, container, forceMount, ...subContentProps } = props;
    const { size, variant, color, highContrast } = React.useContext(DropdownMenuContentContext);
    return (React.createElement(DropdownMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(DropdownMenuPrimitive.SubContent, { "data-accent-color": color, alignOffset: -Number(size) * 4, 
                // Side offset accounts for the outer solid box-shadow
                sideOffset: 1, collisionPadding: 10, ...subContentProps, ref: forwardedRef, className: classNames('rt-PopperContent', 'rt-BaseMenuContent', 'rt-BaseMenuSubContent', 'rt-DropdownMenuContent', 'rt-DropdownMenuSubContent', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(ScrollArea, { type: "auto" },
                    React.createElement("div", { className: classNames('rt-BaseMenuViewport', 'rt-DropdownMenuViewport') }, children))))));
});
DropdownMenuSubContent.displayName = 'DropdownMenuSubContent';
const DropdownMenuSeparator = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.Separator, { ...props, ref: forwardedRef, className: classNames('rt-BaseMenuSeparator', 'rt-DropdownMenuSeparator', props.className) })));
DropdownMenuSeparator.displayName = 'DropdownMenuSeparator';
const DropdownMenu = Object.assign({}, {
    Root: DropdownMenuRoot,
    Trigger: DropdownMenuTrigger,
    Content: DropdownMenuContent,
    Label: DropdownMenuLabel,
    Item: DropdownMenuItem,
    Group: DropdownMenuGroup,
    RadioGroup: DropdownMenuRadioGroup,
    RadioItem: DropdownMenuRadioItem,
    CheckboxItem: DropdownMenuCheckboxItem,
    Sub: DropdownMenuSub,
    SubTrigger: DropdownMenuSubTrigger,
    SubContent: DropdownMenuSubContent,
    Separator: DropdownMenuSeparator,
});
export { DropdownMenu, DropdownMenuRoot, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuItem, DropdownMenuGroup, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuCheckboxItem, DropdownMenuSub, DropdownMenuSubTrigger, DropdownMenuSubContent, DropdownMenuSeparator, };
//# sourceMappingURL=dropdown-menu.js.map