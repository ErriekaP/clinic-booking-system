'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as AvatarPrimitive from '@radix-ui/react-avatar';
import { avatarPropDefs } from './avatar.props';
import { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';
const Avatar = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { className, style, size = avatarPropDefs.size.default, variant = avatarPropDefs.variant.default, color = avatarPropDefs.color.default, highContrast = avatarPropDefs.highContrast.default, radius = avatarPropDefs.radius.default, fallback, ...imageProps } = marginRest;
    const [status, setStatus] = React.useState('idle');
    return (React.createElement(AvatarPrimitive.Root, { "data-accent-color": color, "data-radius": radius, className: classNames('rt-AvatarRoot', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }, withMarginProps(marginProps)), style: style },
        status === 'idle' || status === 'loading' ? React.createElement("span", { className: "rt-AvatarFallback" }) : null,
        status === 'error' ? (React.createElement(AvatarPrimitive.Fallback, { className: classNames('rt-AvatarFallback', {
                'rt-one-letter': typeof fallback === 'string' && fallback.length === 1,
                'rt-two-letters': typeof fallback === 'string' && fallback.length === 2,
            }), delayMs: 0 }, fallback)) : null,
        React.createElement(AvatarPrimitive.Image, { ref: forwardedRef, className: "rt-AvatarImage", ...imageProps, onLoadingStatusChange: (status) => {
                var _a;
                (_a = imageProps.onLoadingStatusChange) === null || _a === void 0 ? void 0 : _a.call(imageProps, status);
                setStatus(status);
            } })));
});
Avatar.displayName = 'Avatar';
export { Avatar };
//# sourceMappingURL=avatar.js.map