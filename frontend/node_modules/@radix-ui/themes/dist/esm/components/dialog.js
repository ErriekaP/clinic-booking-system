'use client';
import * as React from 'react';
import classNames from 'classnames';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { dialogContentPropDefs } from './dialog.props';
import { withBreakpoints } from '../helpers';
import { Heading } from './heading';
import { Text } from './text';
import { Theme } from '../theme';
const DialogRoot = (props) => React.createElement(DialogPrimitive.Root, { ...props, modal: true });
DialogRoot.displayName = 'DialogRoot';
const DialogTrigger = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Trigger, { ...props, ref: forwardedRef, asChild: true }));
DialogTrigger.displayName = 'DialogTrigger';
const DialogContent = React.forwardRef((props, forwardedRef) => {
    const { className, forceMount, container, size = dialogContentPropDefs.size.default, ...contentProps } = props;
    return (React.createElement(DialogPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(Theme, { asChild: true },
            React.createElement(DialogPrimitive.Overlay, { className: "rt-DialogOverlay" },
                React.createElement(DialogPrimitive.Content, { ...contentProps, ref: forwardedRef, className: classNames('rt-DialogContent', className, withBreakpoints(size, 'rt-r-size')) })))));
});
DialogContent.displayName = 'DialogContent';
const DialogTitle = React.forwardRef((props, forwardedRef) => (React.createElement(DialogPrimitive.Title, { asChild: true },
    React.createElement(Heading, { size: "5", mb: "3", trim: "start", ...props, ref: forwardedRef }))));
DialogTitle.displayName = 'DialogTitle';
const DialogDescription = React.forwardRef((props, forwardedRef) => (React.createElement(DialogPrimitive.Description, { asChild: true },
    React.createElement(Text, { as: "p", size: "3", ...props, ref: forwardedRef }))));
DialogDescription.displayName = 'DialogDescription';
const DialogClose = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Close, { ...props, ref: forwardedRef, asChild: true }));
DialogClose.displayName = 'DialogClose';
const Dialog = Object.assign({}, {
    Root: DialogRoot,
    Trigger: DialogTrigger,
    Content: DialogContent,
    Title: DialogTitle,
    Description: DialogDescription,
    Close: DialogClose,
});
export { Dialog, DialogRoot, DialogTrigger, DialogContent, DialogTitle, DialogDescription, DialogClose, };
//# sourceMappingURL=dialog.js.map