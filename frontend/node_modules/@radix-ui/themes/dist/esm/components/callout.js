'use client';
import * as React from 'react';
import classNames from 'classnames';
import { Text } from './text';
import { calloutRootPropDefs } from './callout.props';
import { extractMarginProps, withMarginProps, withBreakpoints } from '../helpers';
const CalloutContext = React.createContext({});
const CalloutRoot = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = extractMarginProps(props);
    const { children, className, size = calloutRootPropDefs.size.default, variant = calloutRootPropDefs.variant.default, color = calloutRootPropDefs.color.default, highContrast = calloutRootPropDefs.highContrast.default, ...rootProps } = marginRest;
    return (React.createElement("div", { "data-accent-color": color, ...rootProps, className: classNames('rt-CalloutRoot', className, withBreakpoints(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }, withMarginProps(marginProps)), ref: forwardedRef },
        React.createElement(CalloutContext.Provider, { value: React.useMemo(() => ({ size, color, highContrast }), [size, color, highContrast]) }, children)));
});
CalloutRoot.displayName = 'CalloutRoot';
const CalloutIcon = React.forwardRef((props, forwardedRef) => {
    const { color, size, highContrast } = React.useContext(CalloutContext);
    return (React.createElement(Text, { asChild: true, color: color, size: getTextSize(size), highContrast: highContrast },
        React.createElement("div", { ...props, className: classNames('rt-CalloutIcon', props.className), ref: forwardedRef })));
});
CalloutIcon.displayName = 'CalloutIcon';
const CalloutText = React.forwardRef((props, forwardedRef) => {
    const { color, size, highContrast } = React.useContext(CalloutContext);
    return (React.createElement(Text, { as: "p", size: getTextSize(size), color: color, highContrast: highContrast, ...props, ref: forwardedRef, className: classNames('rt-CalloutText', props.className) }));
});
CalloutText.displayName = 'CalloutText';
function getTextSize(size) {
    if (size === undefined)
        return undefined;
    if (typeof size === 'string') {
        return getNonResponsiveTextSize(size);
    }
    return Object.fromEntries(Object.entries(size).map(([key, value]) => [key, getNonResponsiveTextSize(value)]));
}
function getNonResponsiveTextSize(size) {
    return size === '3' ? '3' : '2';
}
const Callout = Object.assign({}, {
    Root: CalloutRoot,
    Icon: CalloutIcon,
    Text: CalloutText,
});
export { Callout, CalloutRoot, CalloutIcon, CalloutText };
//# sourceMappingURL=callout.js.map