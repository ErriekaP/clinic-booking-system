"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableRowHeaderCell = exports.TableColumnHeaderCell = exports.TableCell = exports.TableRow = exports.TableBody = exports.TableHeader = exports.TableRoot = exports.Table = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const table_props_1 = require("./table.props");
const helpers_1 = require("../helpers");
const scroll_area_1 = require("./scroll-area");
const TableRoot = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = (0, helpers_1.extractMarginProps)(props);
    const { className, children, size = table_props_1.tableRootPropDefs.size.default, variant = table_props_1.tableRootPropDefs.variant.default, ...rootProps } = marginRest;
    return (React.createElement("div", { ref: forwardedRef, className: (0, classnames_1.default)('rt-TableRoot', className, `rt-variant-${variant}`, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), (0, helpers_1.withMarginProps)(marginProps)), ...rootProps },
        React.createElement(scroll_area_1.ScrollArea, null,
            React.createElement("table", { className: "rt-TableRootTable" }, children))));
});
exports.TableRoot = TableRoot;
TableRoot.displayName = 'Table';
const TableHeader = React.forwardRef((props, forwardedRef) => (React.createElement("thead", { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-TableHeader', props.className) })));
exports.TableHeader = TableHeader;
TableHeader.displayName = 'TableHeader';
const TableBody = React.forwardRef((props, forwardedRef) => (React.createElement("tbody", { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-TableBody', props.className) })));
exports.TableBody = TableBody;
TableBody.displayName = 'TableBody';
const TableRow = React.forwardRef((props, forwardedRef) => {
    const { className, align = table_props_1.tableRowPropDefs.align.default, ...rowProps } = props;
    return (React.createElement("tr", { ...rowProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-TableRow', className, (0, helpers_1.withBreakpoints)(align, 'rt-r-va', {
            baseline: 'baseline',
            start: 'top',
            center: 'middle',
            end: 'bottom',
        })) }));
});
exports.TableRow = TableRow;
TableRow.displayName = 'TableRow';
const TableCellImpl = React.forwardRef((props, forwardedRef) => {
    const { rest: paddingRest, ...paddingProps } = (0, helpers_1.extractPaddingProps)(props);
    const { tag: Tag = 'td', className, style, justify = table_props_1.tableCellPropDefs.justify.default, width = table_props_1.tableCellPropDefs.width.default, ...cellProps } = paddingRest;
    return (React.createElement(Tag, { ...cellProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-TableCell', className, (0, helpers_1.withPaddingProps)(paddingProps), (0, helpers_1.withBreakpoints)(justify, 'rt-r-ta', { start: 'left', center: 'center', end: 'right' })), style: { width, ...style } }));
});
TableCellImpl.displayName = 'TableCellImpl';
const TableCell = React.forwardRef((props, forwardedRef) => (React.createElement(TableCellImpl, { ...props, tag: "td", ref: forwardedRef })));
exports.TableCell = TableCell;
TableCell.displayName = 'TableCell';
const TableColumnHeaderCell = React.forwardRef((props, forwardedRef) => (React.createElement(TableCellImpl, { scope: "col", ...props, tag: "th", ref: forwardedRef, className: (0, classnames_1.default)('rt-TableColumnHeaderCell', props.className) })));
exports.TableColumnHeaderCell = TableColumnHeaderCell;
TableColumnHeaderCell.displayName = 'TableColumnHeaderCell';
const TableRowHeaderCell = React.forwardRef((props, forwardedRef) => (React.createElement(TableCellImpl, { scope: "row", ...props, tag: "th", ref: forwardedRef, className: (0, classnames_1.default)('rt-TableRowHeaderCell', props.className) })));
exports.TableRowHeaderCell = TableRowHeaderCell;
TableRowHeaderCell.displayName = 'TableRowHeaderCell';
const Table = Object.assign({}, {
    Root: TableRoot,
    Header: TableHeader,
    Body: TableBody,
    Row: TableRow,
    Cell: TableCell,
    ColumnHeaderCell: TableColumnHeaderCell,
    RowHeaderCell: TableRowHeaderCell,
});
exports.Table = Table;
//# sourceMappingURL=table.js.map