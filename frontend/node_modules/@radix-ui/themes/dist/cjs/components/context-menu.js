"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenuSeparator = exports.ContextMenuSubContent = exports.ContextMenuSubTrigger = exports.ContextMenuSub = exports.ContextMenuCheckboxItem = exports.ContextMenuRadioItem = exports.ContextMenuRadioGroup = exports.ContextMenuGroup = exports.ContextMenuItem = exports.ContextMenuLabel = exports.ContextMenuContent = exports.ContextMenuTrigger = exports.ContextMenuRoot = exports.ContextMenu = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const ContextMenuPrimitive = tslib_1.__importStar(require("@radix-ui/react-context-menu"));
const react_slot_1 = require("@radix-ui/react-slot");
const scroll_area_1 = require("./scroll-area");
const context_menu_props_1 = require("./context-menu.props");
const helpers_1 = require("../helpers");
const theme_1 = require("../theme");
const icons_1 = require("../icons");
const ContextMenuRoot = (props) => (React.createElement(ContextMenuPrimitive.Root, { ...props }));
exports.ContextMenuRoot = ContextMenuRoot;
ContextMenuRoot.displayName = 'ContextMenuRoot';
const ContextMenuTrigger = React.forwardRef((props, forwardedRef) => React.createElement(ContextMenuPrimitive.Trigger, { ...props, ref: forwardedRef, asChild: true }));
exports.ContextMenuTrigger = ContextMenuTrigger;
ContextMenuTrigger.displayName = 'ContextMenuTrigger';
const ContextMenuContentContext = React.createContext({});
const ContextMenuContent = React.forwardRef((props, forwardedRef) => {
    const themeContext = (0, theme_1.useThemeContext)();
    const { className, children, size = context_menu_props_1.contextMenuContentPropDefs.size.default, variant = context_menu_props_1.contextMenuContentPropDefs.variant.default, color = context_menu_props_1.contextMenuContentPropDefs.color.default, highContrast = context_menu_props_1.contextMenuContentPropDefs.highContrast.default, container, forceMount, ...contentProps } = props;
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(ContextMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(ContextMenuPrimitive.Content, { "data-accent-color": resolvedColor, alignOffset: -Number(size) * 4, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-PopperContent', 'rt-BaseMenuContent', 'rt-ContextMenuContent', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(scroll_area_1.ScrollArea, { type: "auto" },
                    React.createElement("div", { className: (0, classnames_1.default)('rt-BaseMenuViewport', 'rt-ContextMenuViewport') },
                        React.createElement(ContextMenuContentContext.Provider, { value: React.useMemo(() => ({ size, variant, color: resolvedColor, highContrast }), [size, variant, resolvedColor, highContrast]) }, children)))))));
});
exports.ContextMenuContent = ContextMenuContent;
ContextMenuContent.displayName = 'ContextMenuContent';
const ContextMenuLabel = React.forwardRef((props, forwardedRef) => (React.createElement(ContextMenuPrimitive.Label, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuLabel', 'rt-ContextMenuLabel', props.className) })));
exports.ContextMenuLabel = ContextMenuLabel;
ContextMenuLabel.displayName = 'ContextMenuLabel';
const ContextMenuItem = React.forwardRef((props, forwardedRef) => {
    const { className, children, color = context_menu_props_1.contextMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
    return (React.createElement(ContextMenuPrimitive.Item, { "data-accent-color": color, ...itemProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-reset', 'rt-BaseMenuItem', 'rt-ContextMenuItem', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        shortcut && React.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" }, shortcut)));
});
exports.ContextMenuItem = ContextMenuItem;
ContextMenuItem.displayName = 'ContextMenuItem';
const ContextMenuGroup = React.forwardRef((props, forwardedRef) => (React.createElement(ContextMenuPrimitive.Group, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuGroup', 'rt-ContextMenuGroup', props.className) })));
exports.ContextMenuGroup = ContextMenuGroup;
ContextMenuGroup.displayName = 'ContextMenuGroup';
const ContextMenuRadioGroup = React.forwardRef((props, forwardedRef) => (React.createElement(ContextMenuPrimitive.RadioGroup, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuRadioGroup', 'rt-ContextMenuRadioGroup', props.className) })));
exports.ContextMenuRadioGroup = ContextMenuRadioGroup;
ContextMenuRadioGroup.displayName = 'ContextMenuRadioGroup';
const ContextMenuRadioItem = React.forwardRef((props, forwardedRef) => {
    const { children, className, ...itemProps } = props;
    return (React.createElement(ContextMenuPrimitive.RadioItem, { ...itemProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuItem', 'rt-BaseMenuRadioItem', 'rt-ContextMenuItem', 'rt-ContextMenuRadioItem', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        React.createElement(ContextMenuPrimitive.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" }))));
});
exports.ContextMenuRadioItem = ContextMenuRadioItem;
ContextMenuRadioItem.displayName = 'ContextMenuRadioItem';
const ContextMenuCheckboxItem = React.forwardRef((props, forwardedRef) => {
    const { children, className, shortcut, ...itemProps } = props;
    return (React.createElement(ContextMenuPrimitive.CheckboxItem, { ...itemProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuItem', 'rt-BaseMenuCheckboxItem', 'rt-ContextMenuItem', 'rt-ContextMenuCheckboxItem', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        React.createElement(ContextMenuPrimitive.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-ContextMenuItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })),
        shortcut && React.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" }, shortcut)));
});
exports.ContextMenuCheckboxItem = ContextMenuCheckboxItem;
ContextMenuCheckboxItem.displayName = 'ContextMenuCheckboxItem';
const ContextMenuSub = (props) => (React.createElement(ContextMenuPrimitive.Sub, { ...props }));
exports.ContextMenuSub = ContextMenuSub;
ContextMenuSub.displayName = 'ContextMenuSub';
const ContextMenuSubTrigger = React.forwardRef((props, forwardedRef) => {
    const { className, children, ...subTriggerProps } = props;
    return (React.createElement(ContextMenuPrimitive.SubTrigger, { ...subTriggerProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuItem', 'rt-BaseMenuSubTrigger', 'rt-ContextMenuItem', 'rt-ContextMenuSubTrigger', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        React.createElement("div", { className: "rt-BaseMenuShortcut rt-ContextMenuShortcut" },
            React.createElement(icons_1.ThickChevronRightIcon, { className: "rt-BaseMenuSubTriggerIcon rt-ContextMenuSubTriggerIcon" }))));
});
exports.ContextMenuSubTrigger = ContextMenuSubTrigger;
ContextMenuSubTrigger.displayName = 'ContextMenuSubTrigger';
const ContextMenuSubContent = React.forwardRef((props, forwardedRef) => {
    const { className, children, container, forceMount, ...subContentProps } = props;
    const { size, variant, color, highContrast } = React.useContext(ContextMenuContentContext);
    return (React.createElement(ContextMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(ContextMenuPrimitive.SubContent, { "data-accent-color": color, alignOffset: -Number(size) * 4, 
                // Side offset accounts for the outer solid box-shadow
                sideOffset: 1, collisionPadding: 10, ...subContentProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-PopperContent', 'rt-BaseMenuContent', 'rt-BaseMenuSubContent', 'rt-ContextMenuContent', 'rt-ContextMenuSubContent', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(scroll_area_1.ScrollArea, { type: "auto" },
                    React.createElement("div", { className: (0, classnames_1.default)('rt-BaseMenuViewport', 'rt-ContextMenuViewport') }, children))))));
});
exports.ContextMenuSubContent = ContextMenuSubContent;
ContextMenuSubContent.displayName = 'ContextMenuSubContent';
const ContextMenuSeparator = React.forwardRef((props, forwardedRef) => (React.createElement(ContextMenuPrimitive.Separator, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuSeparator', 'rt-ContextMenuSeparator', props.className) })));
exports.ContextMenuSeparator = ContextMenuSeparator;
ContextMenuSeparator.displayName = 'ContextMenuSeparator';
const ContextMenu = Object.assign({}, {
    Root: ContextMenuRoot,
    Trigger: ContextMenuTrigger,
    Content: ContextMenuContent,
    Label: ContextMenuLabel,
    Item: ContextMenuItem,
    Group: ContextMenuGroup,
    RadioGroup: ContextMenuRadioGroup,
    RadioItem: ContextMenuRadioItem,
    CheckboxItem: ContextMenuCheckboxItem,
    Sub: ContextMenuSub,
    SubTrigger: ContextMenuSubTrigger,
    SubContent: ContextMenuSubContent,
    Separator: ContextMenuSeparator,
});
exports.ContextMenu = ContextMenu;
//# sourceMappingURL=context-menu.js.map