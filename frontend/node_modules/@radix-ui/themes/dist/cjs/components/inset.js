"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inset = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const inset_props_1 = require("./inset.props");
const helpers_1 = require("../helpers");
const Inset = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = (0, helpers_1.extractMarginProps)(props);
    const { className, side = inset_props_1.insetPropDefs.side.default, clip = inset_props_1.insetPropDefs.clip.default, p, px, py, pt, pr, pb, pl, ...insetProps } = marginRest;
    return (React.createElement("div", { ...insetProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-Inset', className, (0, helpers_1.withBreakpoints)(side, 'rt-r-side'), (0, helpers_1.withBreakpoints)(clip, 'rt-r-clip'), (0, helpers_1.withBreakpoints)(p, 'rt-r-p'), (0, helpers_1.withBreakpoints)(px, 'rt-r-px'), (0, helpers_1.withBreakpoints)(py, 'rt-r-py'), (0, helpers_1.withBreakpoints)(pt, 'rt-r-pt'), (0, helpers_1.withBreakpoints)(pr, 'rt-r-pr'), (0, helpers_1.withBreakpoints)(pb, 'rt-r-pb'), (0, helpers_1.withBreakpoints)(pl, 'rt-r-pl'), (0, helpers_1.withMarginProps)(marginProps)) }));
});
exports.Inset = Inset;
Inset.displayName = 'Inset';
//# sourceMappingURL=inset.js.map