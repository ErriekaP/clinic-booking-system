"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropdownMenuSeparator = exports.DropdownMenuSubContent = exports.DropdownMenuSubTrigger = exports.DropdownMenuSub = exports.DropdownMenuCheckboxItem = exports.DropdownMenuRadioItem = exports.DropdownMenuRadioGroup = exports.DropdownMenuGroup = exports.DropdownMenuItem = exports.DropdownMenuLabel = exports.DropdownMenuContent = exports.DropdownMenuTrigger = exports.DropdownMenuRoot = exports.DropdownMenu = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const DropdownMenuPrimitive = tslib_1.__importStar(require("@radix-ui/react-dropdown-menu"));
const react_slot_1 = require("@radix-ui/react-slot");
const scroll_area_1 = require("./scroll-area");
const dropdown_menu_props_1 = require("./dropdown-menu.props");
const helpers_1 = require("../helpers");
const theme_1 = require("../theme");
const icons_1 = require("../icons");
const DropdownMenuRoot = (props) => (React.createElement(DropdownMenuPrimitive.Root, { ...props }));
exports.DropdownMenuRoot = DropdownMenuRoot;
DropdownMenuRoot.displayName = 'DropdownMenuRoot';
const DropdownMenuTrigger = React.forwardRef((props, forwardedRef) => React.createElement(DropdownMenuPrimitive.Trigger, { ...props, ref: forwardedRef, asChild: true }));
exports.DropdownMenuTrigger = DropdownMenuTrigger;
DropdownMenuTrigger.displayName = 'DropdownMenuTrigger';
const DropdownMenuContentContext = React.createContext({});
const DropdownMenuContent = React.forwardRef((props, forwardedRef) => {
    const themeContext = (0, theme_1.useThemeContext)();
    const { className, children, size = dropdown_menu_props_1.dropdownMenuContentPropDefs.size.default, variant = dropdown_menu_props_1.dropdownMenuContentPropDefs.variant.default, highContrast = dropdown_menu_props_1.dropdownMenuContentPropDefs.highContrast.default, color = dropdown_menu_props_1.dropdownMenuItemPropDefs.color.default, container, forceMount, ...contentProps } = props;
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(DropdownMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(DropdownMenuPrimitive.Content, { "data-accent-color": resolvedColor, align: "start", sideOffset: 4, collisionPadding: 10, ...contentProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-PopperContent', 'rt-BaseMenuContent', 'rt-DropdownMenuContent', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(scroll_area_1.ScrollArea, { type: "auto" },
                    React.createElement("div", { className: (0, classnames_1.default)('rt-BaseMenuViewport', 'rt-DropdownMenuViewport') },
                        React.createElement(DropdownMenuContentContext.Provider, { value: React.useMemo(() => ({ size, variant, color: resolvedColor, highContrast }), [size, variant, resolvedColor, highContrast]) }, children)))))));
});
exports.DropdownMenuContent = DropdownMenuContent;
DropdownMenuContent.displayName = 'DropdownMenuContent';
const DropdownMenuLabel = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.Label, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuLabel', 'rt-DropdownMenuLabel', props.className) })));
exports.DropdownMenuLabel = DropdownMenuLabel;
DropdownMenuLabel.displayName = 'DropdownMenuLabel';
const DropdownMenuItem = React.forwardRef((props, forwardedRef) => {
    const { className, children, color = dropdown_menu_props_1.dropdownMenuItemPropDefs.color.default, shortcut, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.Item, { "data-accent-color": color, ...itemProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-reset', 'rt-BaseMenuItem', 'rt-DropdownMenuItem', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        shortcut && React.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, shortcut)));
});
exports.DropdownMenuItem = DropdownMenuItem;
DropdownMenuItem.displayName = 'DropdownMenuItem';
const DropdownMenuGroup = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.Group, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuGroup', 'rt-DropdownMenuGroup', props.className) })));
exports.DropdownMenuGroup = DropdownMenuGroup;
DropdownMenuGroup.displayName = 'DropdownMenuGroup';
const DropdownMenuRadioGroup = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.RadioGroup, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuRadioGroup', 'rt-DropdownMenuRadioGroup', props.className) })));
exports.DropdownMenuRadioGroup = DropdownMenuRadioGroup;
DropdownMenuRadioGroup.displayName = 'DropdownMenuRadioGroup';
const DropdownMenuRadioItem = React.forwardRef((props, forwardedRef) => {
    const { children, className, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.RadioItem, { ...itemProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuItem', 'rt-BaseMenuRadioItem', 'rt-DropdownMenuItem', 'rt-DropdownMenuRadioItem', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        React.createElement(DropdownMenuPrimitive.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-DropdownMenuItemIndicatorIcon" }))));
});
exports.DropdownMenuRadioItem = DropdownMenuRadioItem;
DropdownMenuRadioItem.displayName = 'DropdownMenuRadioItem';
const DropdownMenuCheckboxItem = React.forwardRef((props, forwardedRef) => {
    const { children, className, shortcut, ...itemProps } = props;
    return (React.createElement(DropdownMenuPrimitive.CheckboxItem, { ...itemProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuItem', 'rt-BaseMenuCheckboxItem', 'rt-DropdownMenuItem', 'rt-DropdownMenuCheckboxItem', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        React.createElement(DropdownMenuPrimitive.ItemIndicator, { className: "rt-BaseMenuItemIndicator rt-DropdownMenuItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "rt-BaseMenuItemIndicatorIcon rt-ContextMenuItemIndicatorIcon" })),
        shortcut && React.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" }, shortcut)));
});
exports.DropdownMenuCheckboxItem = DropdownMenuCheckboxItem;
DropdownMenuCheckboxItem.displayName = 'DropdownMenuCheckboxItem';
const DropdownMenuSub = (props) => (React.createElement(DropdownMenuPrimitive.Sub, { ...props }));
exports.DropdownMenuSub = DropdownMenuSub;
DropdownMenuSub.displayName = 'DropdownMenuSub';
const DropdownMenuSubTrigger = React.forwardRef((props, forwardedRef) => {
    const { className, children, ...subTriggerProps } = props;
    return (React.createElement(DropdownMenuPrimitive.SubTrigger, { ...subTriggerProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuItem', 'rt-BaseMenuSubTrigger', 'rt-DropdownMenuItem', 'rt-DropdownMenuSubTrigger', className) },
        React.createElement(react_slot_1.Slottable, null, children),
        React.createElement("div", { className: "rt-BaseMenuShortcut rt-DropdownMenuShortcut" },
            React.createElement(icons_1.ThickChevronRightIcon, { className: "rt-BaseMenuSubTriggerIcon rt-DropdownMenuSubtriggerIcon" }))));
});
exports.DropdownMenuSubTrigger = DropdownMenuSubTrigger;
DropdownMenuSubTrigger.displayName = 'DropdownMenuSubTrigger';
const DropdownMenuSubContent = React.forwardRef((props, forwardedRef) => {
    const { className, children, container, forceMount, ...subContentProps } = props;
    const { size, variant, color, highContrast } = React.useContext(DropdownMenuContentContext);
    return (React.createElement(DropdownMenuPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(DropdownMenuPrimitive.SubContent, { "data-accent-color": color, alignOffset: -Number(size) * 4, 
                // Side offset accounts for the outer solid box-shadow
                sideOffset: 1, collisionPadding: 10, ...subContentProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-PopperContent', 'rt-BaseMenuContent', 'rt-BaseMenuSubContent', 'rt-DropdownMenuContent', 'rt-DropdownMenuSubContent', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(scroll_area_1.ScrollArea, { type: "auto" },
                    React.createElement("div", { className: (0, classnames_1.default)('rt-BaseMenuViewport', 'rt-DropdownMenuViewport') }, children))))));
});
exports.DropdownMenuSubContent = DropdownMenuSubContent;
DropdownMenuSubContent.displayName = 'DropdownMenuSubContent';
const DropdownMenuSeparator = React.forwardRef((props, forwardedRef) => (React.createElement(DropdownMenuPrimitive.Separator, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-BaseMenuSeparator', 'rt-DropdownMenuSeparator', props.className) })));
exports.DropdownMenuSeparator = DropdownMenuSeparator;
DropdownMenuSeparator.displayName = 'DropdownMenuSeparator';
const DropdownMenu = Object.assign({}, {
    Root: DropdownMenuRoot,
    Trigger: DropdownMenuTrigger,
    Content: DropdownMenuContent,
    Label: DropdownMenuLabel,
    Item: DropdownMenuItem,
    Group: DropdownMenuGroup,
    RadioGroup: DropdownMenuRadioGroup,
    RadioItem: DropdownMenuRadioItem,
    CheckboxItem: DropdownMenuCheckboxItem,
    Sub: DropdownMenuSub,
    SubTrigger: DropdownMenuSubTrigger,
    SubContent: DropdownMenuSubContent,
    Separator: DropdownMenuSeparator,
});
exports.DropdownMenu = DropdownMenu;
//# sourceMappingURL=dropdown-menu.js.map