"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialogClose = exports.DialogDescription = exports.DialogTitle = exports.DialogContent = exports.DialogTrigger = exports.DialogRoot = exports.Dialog = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const DialogPrimitive = tslib_1.__importStar(require("@radix-ui/react-dialog"));
const dialog_props_1 = require("./dialog.props");
const helpers_1 = require("../helpers");
const heading_1 = require("./heading");
const text_1 = require("./text");
const theme_1 = require("../theme");
const DialogRoot = (props) => React.createElement(DialogPrimitive.Root, { ...props, modal: true });
exports.DialogRoot = DialogRoot;
DialogRoot.displayName = 'DialogRoot';
const DialogTrigger = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Trigger, { ...props, ref: forwardedRef, asChild: true }));
exports.DialogTrigger = DialogTrigger;
DialogTrigger.displayName = 'DialogTrigger';
const DialogContent = React.forwardRef((props, forwardedRef) => {
    const { className, forceMount, container, size = dialog_props_1.dialogContentPropDefs.size.default, ...contentProps } = props;
    return (React.createElement(DialogPrimitive.Portal, { container: container, forceMount: forceMount },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(DialogPrimitive.Overlay, { className: "rt-DialogOverlay" },
                React.createElement(DialogPrimitive.Content, { ...contentProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-DialogContent', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size')) })))));
});
exports.DialogContent = DialogContent;
DialogContent.displayName = 'DialogContent';
const DialogTitle = React.forwardRef((props, forwardedRef) => (React.createElement(DialogPrimitive.Title, { asChild: true },
    React.createElement(heading_1.Heading, { size: "5", mb: "3", trim: "start", ...props, ref: forwardedRef }))));
exports.DialogTitle = DialogTitle;
DialogTitle.displayName = 'DialogTitle';
const DialogDescription = React.forwardRef((props, forwardedRef) => (React.createElement(DialogPrimitive.Description, { asChild: true },
    React.createElement(text_1.Text, { as: "p", size: "3", ...props, ref: forwardedRef }))));
exports.DialogDescription = DialogDescription;
DialogDescription.displayName = 'DialogDescription';
const DialogClose = React.forwardRef((props, forwardedRef) => React.createElement(DialogPrimitive.Close, { ...props, ref: forwardedRef, asChild: true }));
exports.DialogClose = DialogClose;
DialogClose.displayName = 'DialogClose';
const Dialog = Object.assign({}, {
    Root: DialogRoot,
    Trigger: DialogTrigger,
    Content: DialogContent,
    Title: DialogTitle,
    Description: DialogDescription,
    Close: DialogClose,
});
exports.Dialog = Dialog;
//# sourceMappingURL=dialog.js.map