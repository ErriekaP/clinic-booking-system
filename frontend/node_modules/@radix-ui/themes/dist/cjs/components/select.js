"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectSeparator = exports.SelectLabel = exports.SelectGroup = exports.SelectItem = exports.SelectContent = exports.SelectTrigger = exports.SelectRoot = exports.Select = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const SelectPrimitive = tslib_1.__importStar(require("@radix-ui/react-select"));
const ScrollAreaPrimitive = tslib_1.__importStar(require("@radix-ui/react-scroll-area"));
const select_props_1 = require("./select.props");
const helpers_1 = require("../helpers");
const theme_1 = require("../theme");
const icons_1 = require("../icons");
const SelectContext = React.createContext({});
const SelectRoot = (props) => {
    const { children, size = select_props_1.selectRootPropDefs.size.default, ...rootProps } = props;
    return (React.createElement(SelectPrimitive.Root, { ...rootProps },
        React.createElement(SelectContext.Provider, { value: React.useMemo(() => ({ size }), [size]) }, children)));
};
exports.SelectRoot = SelectRoot;
SelectRoot.displayName = 'SelectRoot';
const SelectTrigger = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = (0, helpers_1.extractMarginProps)(props);
    const { className, variant = select_props_1.selectTriggerPropDefs.variant.default, color = select_props_1.selectTriggerPropDefs.color.default, radius = select_props_1.selectTriggerPropDefs.radius.default, placeholder, ...triggerProps } = marginRest;
    const { size } = React.useContext(SelectContext);
    return (React.createElement(SelectPrimitive.Trigger, { asChild: true },
        React.createElement("button", { "data-accent-color": color, "data-radius": radius, ...triggerProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-reset', 'rt-SelectTrigger', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), `rt-variant-${variant}`, (0, helpers_1.withMarginProps)(marginProps)) },
            React.createElement("span", { className: "rt-SelectTriggerInner" },
                React.createElement(SelectPrimitive.Value, { placeholder: placeholder })),
            React.createElement(SelectPrimitive.Icon, { asChild: true },
                React.createElement(icons_1.ChevronDownIcon, { className: "rt-SelectIcon" })))));
});
exports.SelectTrigger = SelectTrigger;
SelectTrigger.displayName = 'SelectTrigger';
const SelectContent = React.forwardRef((props, forwardedRef) => {
    const { className, children, variant = select_props_1.selectContentPropDefs.variant.default, highContrast = select_props_1.selectContentPropDefs.highContrast.default, color = select_props_1.selectContentPropDefs.color.default, container, ...contentProps } = props;
    const { size } = React.useContext(SelectContext);
    const themeContext = (0, theme_1.useThemeContext)();
    const resolvedColor = color !== null && color !== void 0 ? color : themeContext.accentColor;
    return (React.createElement(SelectPrimitive.Portal, { container: container },
        React.createElement(theme_1.Theme, { asChild: true },
            React.createElement(SelectPrimitive.Content, { "data-accent-color": resolvedColor, sideOffset: 4, ...contentProps, ref: forwardedRef, className: (0, classnames_1.default)({ 'rt-PopperContent': contentProps.position === 'popper' }, 'rt-SelectContent', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }) },
                React.createElement(ScrollAreaPrimitive.Root, { type: "auto", className: "rt-ScrollAreaRoot" },
                    React.createElement(SelectPrimitive.Viewport, { asChild: true, className: "rt-SelectViewport" },
                        React.createElement(ScrollAreaPrimitive.Viewport, { className: "rt-ScrollAreaViewport", style: { overflowY: undefined } }, children)),
                    React.createElement(ScrollAreaPrimitive.Scrollbar, { className: "rt-ScrollAreaScrollbar rt-r-size-1", orientation: "vertical" },
                        React.createElement(ScrollAreaPrimitive.Thumb, { className: "rt-ScrollAreaThumb" })))))));
});
exports.SelectContent = SelectContent;
SelectContent.displayName = 'SelectContent';
const SelectItem = React.forwardRef((props, forwardedRef) => {
    const { className, children, ...itemProps } = props;
    return (React.createElement(SelectPrimitive.Item, { ...itemProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-SelectItem', className) },
        React.createElement(SelectPrimitive.ItemIndicator, { className: "rt-SelectItemIndicator" },
            React.createElement(icons_1.ThickCheckIcon, { className: "rt-SelectItemIndicatorIcon" })),
        React.createElement(SelectPrimitive.ItemText, null, children)));
});
exports.SelectItem = SelectItem;
SelectItem.displayName = 'SelectItem';
const SelectGroup = React.forwardRef((props, forwardedRef) => (React.createElement(SelectPrimitive.Group, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-SelectGroup', props.className) })));
exports.SelectGroup = SelectGroup;
SelectGroup.displayName = 'SelectGroup';
const SelectLabel = React.forwardRef((props, forwardedRef) => (React.createElement(SelectPrimitive.Label, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-SelectLabel', props.className) })));
exports.SelectLabel = SelectLabel;
SelectLabel.displayName = 'SelectLabel';
const SelectSeparator = React.forwardRef((props, forwardedRef) => (React.createElement(SelectPrimitive.Separator, { ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-SelectSeparator', props.className) })));
exports.SelectSeparator = SelectSeparator;
SelectSeparator.displayName = 'SelectSeparator';
const Select = Object.assign({}, {
    Root: SelectRoot,
    Trigger: SelectTrigger,
    Content: SelectContent,
    Item: SelectItem,
    Group: SelectGroup,
    Label: SelectLabel,
    Separator: SelectSeparator,
});
exports.Select = Select;
//# sourceMappingURL=select.js.map