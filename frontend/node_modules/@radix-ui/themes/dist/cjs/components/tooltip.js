"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const TooltipPrimitive = tslib_1.__importStar(require("@radix-ui/react-tooltip"));
const text_1 = require("./text");
const theme_1 = require("../theme");
const Tooltip = React.forwardRef((props, forwardedRef) => {
    const { children, className, open, defaultOpen, onOpenChange, delayDuration, disableHoverableContent, content, container, forceMount, ...tooltipContentProps } = props;
    const rootProps = { open, defaultOpen, onOpenChange, delayDuration, disableHoverableContent };
    return (React.createElement(TooltipPrimitive.Root, { ...rootProps },
        React.createElement(TooltipPrimitive.Trigger, { asChild: true }, children),
        React.createElement(TooltipPrimitive.Portal, { container: container, forceMount: forceMount },
            React.createElement(theme_1.Theme, { asChild: true },
                React.createElement(TooltipPrimitive.Content, { sideOffset: 4, collisionPadding: 10, ...tooltipContentProps, ref: forwardedRef, className: (0, classnames_1.default)('rt-TooltipContent', className) },
                    React.createElement(text_1.Text, { as: "p", className: "rt-TooltipText", size: "1" }, content),
                    React.createElement(TooltipPrimitive.Arrow, { className: "rt-TooltipArrow" }))))));
});
exports.Tooltip = Tooltip;
Tooltip.displayName = 'Tooltip';
//# sourceMappingURL=tooltip.js.map