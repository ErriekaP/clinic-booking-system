"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalloutText = exports.CalloutIcon = exports.CalloutRoot = exports.Callout = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const text_1 = require("./text");
const callout_props_1 = require("./callout.props");
const helpers_1 = require("../helpers");
const CalloutContext = React.createContext({});
const CalloutRoot = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = (0, helpers_1.extractMarginProps)(props);
    const { children, className, size = callout_props_1.calloutRootPropDefs.size.default, variant = callout_props_1.calloutRootPropDefs.variant.default, color = callout_props_1.calloutRootPropDefs.color.default, highContrast = callout_props_1.calloutRootPropDefs.highContrast.default, ...rootProps } = marginRest;
    return (React.createElement("div", { "data-accent-color": color, ...rootProps, className: (0, classnames_1.default)('rt-CalloutRoot', className, (0, helpers_1.withBreakpoints)(size, 'rt-r-size'), `rt-variant-${variant}`, { 'rt-high-contrast': highContrast }, (0, helpers_1.withMarginProps)(marginProps)), ref: forwardedRef },
        React.createElement(CalloutContext.Provider, { value: React.useMemo(() => ({ size, color, highContrast }), [size, color, highContrast]) }, children)));
});
exports.CalloutRoot = CalloutRoot;
CalloutRoot.displayName = 'CalloutRoot';
const CalloutIcon = React.forwardRef((props, forwardedRef) => {
    const { color, size, highContrast } = React.useContext(CalloutContext);
    return (React.createElement(text_1.Text, { asChild: true, color: color, size: getTextSize(size), highContrast: highContrast },
        React.createElement("div", { ...props, className: (0, classnames_1.default)('rt-CalloutIcon', props.className), ref: forwardedRef })));
});
exports.CalloutIcon = CalloutIcon;
CalloutIcon.displayName = 'CalloutIcon';
const CalloutText = React.forwardRef((props, forwardedRef) => {
    const { color, size, highContrast } = React.useContext(CalloutContext);
    return (React.createElement(text_1.Text, { as: "p", size: getTextSize(size), color: color, highContrast: highContrast, ...props, ref: forwardedRef, className: (0, classnames_1.default)('rt-CalloutText', props.className) }));
});
exports.CalloutText = CalloutText;
CalloutText.displayName = 'CalloutText';
function getTextSize(size) {
    if (size === undefined)
        return undefined;
    if (typeof size === 'string') {
        return getNonResponsiveTextSize(size);
    }
    return Object.fromEntries(Object.entries(size).map(([key, value]) => [key, getNonResponsiveTextSize(value)]));
}
function getNonResponsiveTextSize(size) {
    return size === '3' ? '3' : '2';
}
const Callout = Object.assign({}, {
    Root: CalloutRoot,
    Icon: CalloutIcon,
    Text: CalloutText,
});
exports.Callout = Callout;
//# sourceMappingURL=callout.js.map