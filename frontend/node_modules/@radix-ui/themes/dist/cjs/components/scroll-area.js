"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScrollArea = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const ScrollAreaPrimitive = tslib_1.__importStar(require("@radix-ui/react-scroll-area"));
const scroll_area_props_1 = require("./scroll-area.props");
const helpers_1 = require("../helpers");
const ScrollArea = React.forwardRef((props, forwardedRef) => {
    const { rest: marginRest, ...marginProps } = (0, helpers_1.extractMarginProps)(props);
    const { className, style, type, scrollHideDelay = type !== 'scroll' ? 0 : undefined, dir, size = scroll_area_props_1.scrollAreaPropDefs.size.default, radius = scroll_area_props_1.scrollAreaPropDefs.radius.default, scrollbars = scroll_area_props_1.scrollAreaPropDefs.scrollbars.default, ...viewportProps } = marginRest;
    return (React.createElement(ScrollAreaPrimitive.Root, { type: type, scrollHideDelay: scrollHideDelay, className: (0, classnames_1.default)('rt-ScrollAreaRoot', className, (0, helpers_1.withMarginProps)(marginProps)), style: style },
        React.createElement(ScrollAreaPrimitive.Viewport, { ...viewportProps, ref: forwardedRef, className: "rt-ScrollAreaViewport" }),
        React.createElement("div", { className: "rt-ScrollAreaViewportFocusRing" }),
        scrollbars !== 'vertical' ? (React.createElement(ScrollAreaPrimitive.Scrollbar, { "data-radius": radius, orientation: "horizontal", className: (0, classnames_1.default)('rt-ScrollAreaScrollbar', (0, helpers_1.withBreakpoints)(size, 'rt-r-size')) },
            React.createElement(ScrollAreaPrimitive.Thumb, { className: "rt-ScrollAreaThumb" }))) : null,
        scrollbars !== 'horizontal' ? (React.createElement(ScrollAreaPrimitive.Scrollbar, { "data-radius": radius, orientation: "vertical", className: (0, classnames_1.default)('rt-ScrollAreaScrollbar', (0, helpers_1.withBreakpoints)(size, 'rt-r-size')) },
            React.createElement(ScrollAreaPrimitive.Thumb, { className: "rt-ScrollAreaThumb" }))) : null,
        scrollbars === 'both' ? (React.createElement(ScrollAreaPrimitive.Corner, { className: "rt-ScrollAreaCorner" })) : null));
});
exports.ScrollArea = ScrollArea;
ScrollArea.displayName = 'ScrollArea';
//# sourceMappingURL=scroll-area.js.map