// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// contactNumber Int
//  dateOfBirth DateTime
//  gender Gender
//  status Status
// firstName String
// middleName String
// lastName String

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  DOCTOR
  NURSE
  STAFF
}

enum Type {
  STUDENT
  EMPLOYEE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  COMPLETE
  REQUESTTOCANCELBYSTUDENT
  REQUESTTOCANCELBYDOCTOR
  CANCELLEDBYSTUDENT
  CANCELLEDBYDOCTOR
}

enum QueueStatus {
  JOINED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  AGENDER
  GENDERFLUID
  BIGENDER
  ANDROGYNOUS
  PREFER_NOT_TO_SAY
  OTHER
}

enum BloodType {
  O
  A
  B
  AB
}

model ClinicPersonnel {
  id Int @id @default(autoincrement())
  supabaseUserID String @unique
  role Role
  firstName String
  middleName String
  lastName String
  email String @unique
  password String
  phoneNumber String
  dateOfBirth DateTime
  gender Gender
  appointment Appointments[]
  services        Service[]    @relation("ClinicPersonnelServices")
  workSchedule    WorkSchedule[]    @relation("ClinicPersonnelWorkSchedule")
  status Status
  specialty String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkSchedule{
  id Int @id @default(autoincrement())
  timeFrom DateTime
  timeTo DateTime
  personnel ClinicPersonnel[] @relation("ClinicPersonnelWorkSchedule")
}
model Patient {
  id Int @id @default(autoincrement())
  supabaseUserID String @unique
  schoolID String
  firstName String
  middleName String
  lastName String
  address Address?
  email String @unique
  password String
  patientType Type
  course String
  section String
  cluster String
  department String
  occupation String
  facultyDepartment String
  contactNumber String
  dateOfBirth DateTime
  gender Gender
  bloodType BloodType
  emergencyContact EmergencyContact?
  familyPhysician FamilyPhysician?
  medicalHistory MedicalHistory?
  appointment Appointments[]
  queue Queue[]
  status Status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address{
id Int @id @default(autoincrement())
patientID Int @unique
city String
province String
zipCode String
houseNo String
street String
barangay String
subdivision String
patient Patient @relation(fields: [patientID], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model EmergencyContact{
id Int @id @default(autoincrement())
patientID Int @unique
firstName String
lastName String
contactNumber String
relation String
healthInsuranceCompany String
emergencyHospital String
patient Patient @relation(fields: [patientID], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model FamilyPhysician{
id Int @id @default(autoincrement())
patientID Int @unique
firstName String
lastName String
contactNumber String
patient Patient @relation(fields: [patientID], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model MedicalHistory{
id Int @id @default(autoincrement())
patientID Int @unique
famHistory String
childhoodDiseases String
medicalCondition String
hospitalization String
medication String
allergies String
vaccines String
psychosocialHistory String
sexualHistory String
patient Patient @relation(fields: [patientID], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Service{
id Int @id @default(autoincrement())
serviceName String
description String
status Status
appointment Appointments[]
personnel       ClinicPersonnel[]  @relation("ClinicPersonnelServices")
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Appointments{
id Int @id @default(autoincrement())
patientID Int?
personnelID Int 
serviceID Int 
startTime DateTime
endTime DateTime
details String
status AppointmentStatus
reasonforCancellation String
patient Patient? @relation(fields: [patientID], references: [id])
personnel ClinicPersonnel @relation(fields: [personnelID], references: [id])
service Service @relation(fields: [serviceID], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Queue{
id Int @id @default(autoincrement())
patientID Int @unique
purpose String
queueSched DateTime
status QueueStatus
patient Patient @relation(fields: [patientID], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}